# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:

- stage: Test
  displayName: Test
  jobs:
    - job: Test
      pool:
        name: Default
      steps:
      - script: echo Test
        displayName: 'Prepare Testing'

      - task: PowerShell@2
        inputs:
          filePath: $(System.DefaultWorkingDirectory)\Invoke-ToscaCloudPlaylist.ps1
          arguments: >
            -TokenUrl "$(ToscaAuthURL)"
            -ClientId "$(ToscaClientId)"
            -ClientSecret "$(ToscaClientSecret)"
            -Scope "tta"
            -TenantBaseUrl "https://$(ToscaTenant).my.tricentis.com/$(ToscaWorkspaceID)"
            -PlaylistConfigFilePath "PlaylistConfig.json"
            -ResultsFileName "results.xml"
            -ResultsFolderPath "C:\Tricentis\Tosca\Results"
        displayName: 'Execute Tosca Cloud Playlist and Upload Results'


  
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $inputPath = "C:\Tricentis\Tosca\Results\results.xml"
            $outputPath = "C:\Tricentis\Tosca\Results\results_encode.xml"

            if (Test-Path $inputPath) {
                # Read as raw bytes
                $bytes = [System.IO.File]::ReadAllBytes($inputPath)

                # Check if first three bytes match a BOM
                if ($bytes.Length -ge 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
                    Write-Host "Detected UTF-8 BOM, removing..."
                    $bytes = $bytes[3..$bytes.Length]  # Strip BOM
                }

                # Convert bytes to string using UTF-8 decoding
                $content = [System.Text.Encoding]::UTF8.GetString($bytes)

                # Remove any hidden special characters (like your unexpected 195, 175, 194)
                $content = $content -replace "[^\u0000-\u007F]+", ""  # Removes non-ASCII hidden characters

                # Force write using UTF-8 without BOM
                $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
                [System.IO.File]::WriteAllText($outputPath, $content, $utf8NoBomEncoding)

                Write-Host "File successfully cleaned and saved!"
            } else {
                Write-Host "Input file not found!"
            }
        displayName: 'Clean Results XML File'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: 'C:\Tricentis\Tosca\Results\results_encode.xml'